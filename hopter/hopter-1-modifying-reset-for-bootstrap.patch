diff --git a/src/boot/reset.rs b/src/boot/reset.rs
index 418796e..3500038 100644
--- a/src/boot/reset.rs
+++ b/src/boot/reset.rs
@@ -16,7 +16,7 @@ use crate::unwind;
 pub(super) unsafe extern "C" fn entry() -> ! {
     asm!(
         // Jump to perform memory initialization.
-        "b  {memory_init}",
+        "j  {memory_init}",
         memory_init = sym memory_init,
         options(noreturn)
     );
@@ -40,24 +40,24 @@ unsafe extern "C" fn memory_init() {
 
     asm!(
         // Fill zero to `.bss` section in SRAM.
-        "ldr r0, ={sbss}",
-        "ldr r1, ={ebss}",
-        "sub r1, r1, r0",
-        "bl  {memclr}",
+        "la t0, {sbss}",
+        "la t1, {ebss}",
+        "sub t1, t1, t0",
+        "jal {memclr}",
         // Copy the `.data` section from flash to SRAM.
-        "ldr r0, ={sdata}",
-        "ldr r1, ={sidata}",
-        "ldr r2, ={edata}",
-        "sub r2, r2, r0",
-        "bl  {memcpy}",
+        "la t0, {sdata}",
+        "la t1, {sidata}",
+        "la t2, {edata}",
+        "sub t2, t2, t0",
+        "jal {memcpy}",
         // Fill 0xAA to the contiguous stack region. Will help us diagnose
         // stack overflow.
-        "mov r0, #0x20000000",
-        "mov r1, #0xAA",
-        "ldr r2, ={cont_stk_len}",
-        "bl  {memset}",
+        "li t0, 0x20000000",
+        "li t1, 0xAA",
+        "la t2, {cont_stk_len}",
+        "jal {memset}",
         // Next, perform TLS area initialization.
-        "b  {tls_init}",
+        "j {tls_init}",
         sbss = sym __sbss,
         ebss = sym __ebss,
         sdata = sym __sdata,
@@ -79,15 +79,15 @@ unsafe extern "C" fn tls_init() {
         // Setting the task local storage (TLS) area.
         // See `task::TaskLocalStorage` for details.
         // Set the `stklet_bound` field.
-        "ldr r1, ={cont_stk_boundary}",
-        "ldr r0, ={stklet_boundary_mem_addr}",
-        "str r1, [r0]",
+        "la t1, {cont_stk_boundary}",
+        "la t0, {stklet_boundary_mem_addr}",
+        "sw t1, 0(t0)",
         // Set the `nested_drop_cnt` and `unwind_pending` field.
-        "mov r1, #0",
-        "str r1, [r0, #4]",
-        "str r1, [r0, #8]",
+        "li t1, 0",
+        "sw t1, 4(t0)",
+        "sw t1, 8(t0)",
         // Next, perform deferred forced unwinding initialization.
-        "b  {deferred_unwind_init}",
+        "j {deferred_unwind_init}",
         cont_stk_boundary = const config::__CONTIGUOUS_STACK_BOUNDARY,
         stklet_boundary_mem_addr = const config::__TLS_MEM_ADDR,
         deferred_unwind_init = sym deferred_unwind_init,
@@ -102,11 +102,11 @@ unsafe extern "C" fn deferred_unwind_init() {
     asm!(
         // Set the function pointer for deferred forced unwinding. See
         // `unwind::forced` for details.
-        "ldr r1, ={deferred_unwind}",
-        "str r1, [r0, #12]",
-        "mov lr, #0",
+        "la t0, {deferred_unwind}",
+        "sw t0, 12(sp)",
+        "li t1, 0",
         // Call into Rust code.
-        "b  {system_start}",
+        "j {system_start}",
         deferred_unwind = sym unwind::forced::deferred_unwind,
         system_start = sym system_init::system_start,
         options(noreturn)
@@ -118,7 +118,7 @@ unsafe extern "C" fn deferred_unwind_init() {
 unsafe extern "C" fn deferred_unwind_init() {
     asm!(
         // Call into Rust code when unwinding is not enabled.
-        "b  {system_start}",
+        "j {system_start}",
         system_start = sym system_init::system_start,
         options(noreturn)
     )
